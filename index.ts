import { Bot } from "grammy";
import { ConvexHttpClient } from "convex/browser";
import { api } from "./convex/_generated/api";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const botToken = process.env.TELEGRAM_BOT_TOKEN!;
console.log("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Ç–æ–∫–µ–Ω:", botToken.substring(0, 10) + "...");
const bot = new Bot(botToken);
const convex = new ConvexHttpClient(process.env.CONVEX_URL!);

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const ADMIN_CHAT_IDS = process.env.ADMIN_CHAT_IDS?.split(',').map(id => parseInt(id.trim())) || [];
console.log("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:", ADMIN_CHAT_IDS);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ
async function sendNewLeadNotification(leadId: any) {
  try {
    const lead = await convex.query(api.leads.getLeadById, { leadId });
    if (!lead) {
      console.error("Lead not found:", leadId);
      return;
    }

    const message = `*–ù–æ–≤—ã–π –ª–∏–¥:*
–ò–º—è: ${lead.firstName || "N/A"} ${lead.lastName || ""}
Telegram: ${lead.username ? `@${lead.username}` : "N/A"}
Email: ${lead.email || "N/A"}
–¢–µ–ª–µ—Ñ–æ–Ω: ${lead.phone || "N/A"}
–°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥: ${lead.country || "N/A"} ${lead.city || ""}
–û–ø—ã—Ç: ${lead.experience || "N/A"} –ª–µ—Ç
–ë—é–¥–∂–µ—Ç: ${lead.budget || "N/A"}
–ù–∏—à–∞: ${lead.niche || "N/A"}
–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${lead.preferredTime?.join(", ") || "N/A"}
–°—Ç–∞—Ç—É—Å: ${lead.status}
Chat ID: \`${lead.chatId}\`
User ID: \`${lead.userId}\``;

    for (const chatId of ADMIN_CHAT_IDS) {
      await bot.api.sendMessage(chatId, message, { parse_mode: "Markdown" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
async function sendNewQuestionNotification(questionId: any) {
  try {
    const question = await convex.query(api.questions.getQuestionById, { questionId });
    if (!question) {
      console.error("Question not found:", questionId);
      return;
    }
    const lead = await convex.query(api.leads.getLead, { chatId: question.chatId });

    const message = `*–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:*
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${lead?.firstName || "N/A"} ${lead?.lastName || ""} (${lead?.username ? `@${lead?.username}` : "N/A"})
–í–æ–ø—Ä–æ—Å: ${question.question}
Chat ID: \`${question.chatId}\`
–í—Ä–µ–º—è: ${new Date(question.createdAt).toLocaleString()}`;

    for (const chatId of ADMIN_CHAT_IDS) {
      await bot.api.sendMessage(chatId, message, { parse_mode: "Markdown" });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ:", error);
  }
}

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
type DialogStep = 
  | "welcome"
  | "want_details"
  | "how_it_works"
  | "financial_model"
  | "investments"
  | "roles"
  | "qualification"
  | "call_booking"
  | "call_form"
  | "call_form_name"
  | "call_form_contact"
  | "call_form_location"
  | "call_form_experience"
  | "call_form_budget"
  | "call_form_niche"
  | "call_form_time"
  | "call_confirmation"
  | "faq"
  | "beginner_check";

// –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¢–ó
const messages = {
  welcome: `–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ: –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π *–∑–∞ 6 –º–µ—Å—è—Ü–µ–≤* —Å–æ–±–∏—Ä–∞–µ–º *B2B-–±–∏–∑–Ω–µ—Å –Ω–∞ –ò–ò-–∞–≥–µ–Ω—Ç–∞—Ö* —Å –æ–±–æ—Ä–æ—Ç–æ–º –ø—Ä–∏–º–µ—Ä–Ω–æ *$15 000 –≤ –º–µ—Å—è—Ü*.  
–ï—â—ë —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ ‚Äî *–≥–æ—Ç–æ–≤–∏–º –∏ –ø—Ä–æ–¥–∞—ë–º –±–∏–∑–Ω–µ—Å*. –î–æ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ –¥–µ–ª–∏–º.  
–ò—â–µ–º *10 –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ (–¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∏–∑–Ω–µ—Å–æ–≤ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ä—ã–Ω–∫–µ)*. –ù–∏–∫–∞–∫–∏—Ö ¬´–∫—É—Ä—Å–æ–≤¬ª –∏ –≤–æ–ª—à–µ–±–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –ø–ª–µ—á–æ–º –∫ –ø–ª–µ—á—É.  
–ï—Å–ª–∏ —Ç—ã –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç ‚Äî –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.`,

  wantDetails: `–°—É–ø–µ—Ä. –ù–∏–∂–µ ‚Äî –≤—Å—ë –ø–æ –¥–µ–ª—É: –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–º–µ—Ä —Ü–∏—Ñ—Ä, –≤–ª–æ–∂–µ–Ω–∏—è, —Ä–æ–ª–∏.  
–ü—Ä–æ–ª–∏—Å—Ç–∞–π, –∞ –¥–∞–ª—å—à–µ ‚Äî –Ω–∞ —Å–æ–∑–≤–æ–Ω, –æ–±—Å—É–¥–∏–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ–¥–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.`,

  howItWorks: `*–ü–µ—Ä–≤—ã–µ 4-8 –Ω–µ–¥–µ–ª—å.* –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Å—á–µ—Ç–∞.  
*2-4 –º–µ—Å—è—Ü–∞.* –ú—ã –≤–º–µ—Å—Ç–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∏–ª–æ—Ç—ã –∏ –≤—ã—Ö–æ–¥–∏–º –Ω–∞ *3‚Äì5 –ø–ª–∞—Ç—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤*. –≠—Ç–æ –Ω–µ ¬´—Ö–æ–ª–æ–¥–Ω—ã–µ –º–µ—á—Ç—ã¬ª, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∫–∏. –¢—ã –±–µ—Ä—ë—à—å –Ω–∞ —Å–µ–±—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å–≤—è–∑–∏, –º—ã ‚Äî —Å–±–æ—Ä–∫—É –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ ¬´–ø–æ–¥ –∫–ª—é—á¬ª –∏ —É–ø–∞–∫–æ–≤–∫—É –æ—Ñ—Ñ–µ—Ä–∞.

*–ö 4‚Äì6 –º–µ—Å—è—Ü—É.* –¶–µ–ª—å ‚Äî *—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ ~$15 000 MRR* –∑–∞ —Å—á—ë—Ç –ø–æ–¥–ø–∏—Å–æ–∫/—Ä–µ—Ç–µ–π–Ω–µ—Ä–æ–≤. –ú—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã, –º–µ—Ç—Ä–∏–∫–∏, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ —à–ª–∏ –Ω–µ —Ä–∞–∑–æ–≤–æ, –∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ.

*–ö 10‚Äì12 –º–µ—Å—è—Ü—É.* –ì–æ—Ç–æ–≤–∏–º –±–∏–∑–Ω–µ—Å –∫ –ø—Ä–æ–¥–∞–∂–µ: —Å–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –ø—Ä–∏–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –ø–æ—Ä—è–¥–æ–∫. –ü–æ –Ω–∞—à–∏–º –∫–µ–π—Å–∞–º *—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ ~50 –º–ª–Ω ‚ÇΩ*. –î–æ—Ö–æ–¥ –æ—Ç —Å–¥–µ–ª–∫–∏ *–¥–µ–ª–∏–º*.

–í–∞–∂–Ω–æ: –º—ã –Ω–µ –æ–±–µ—â–∞–µ–º ¬´–≤—Å–µ–º –∏ —Å—Ä–∞–∑—É¬ª. *–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.* –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —É—Å–∫–æ—Ä—è—Ç—å –∏ –¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –∫ —Ü–µ–ª–∏.`,

  financialModel: `–î–∞–≤–∞–π –Ω–∞ —Ü–∏—Ñ—Ä–∞—Ö, –±–µ–∑ —Ç—É–º–∞–Ω–∞.  
*–û—Ä–∏–µ–Ω—Ç–∏—Ä –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤:* –≤—ã—Ö–æ–¥–∏–º –Ω–∞ *~$15 000/–º–µ—Å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö*. –≠—Ç–æ –æ–±—ã—á–Ω–æ *20‚Äì30 –∫–ª–∏–µ–Ω—Ç–æ–≤* –Ω–∞ —Ä–µ—Ç–µ–π–Ω–µ—Ä–∞—Ö.

*–ß—Ç–æ –≤ –∏—Ç–æ–≥–µ –ø–æ —ç—Ç–∞–ø–∞–º:*  
*1‚Äì6 –º–µ—Å—è—Ü.* –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è: –æ–∫–æ–ª–æ *30 —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫* —Å —á–µ–∫–æ–º *$2 000‚Äì5 000* –∫–∞–∂–¥–∞—è.  
‚ûú –í–∞–ª–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ ~*$80 000* —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞—Ö.  
‚ûú –û—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ ~*30%* ‚Üí *~$24 000*.

*6‚Äì12 –º–µ—Å—è—Ü.* –ü–æ–¥–ø–∏—Å–∫–∏ + –Ω–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: *~$15 000/–º–µ—Å MRR* –∏ –ø—Ä–∏—Ä–æ—Å—Ç.  
‚ûú –û—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ —Å –ø–æ–¥–ø–∏—Å–æ–∫ *~70%* ‚Üí *~$10 000/–º–µ—Å*.

*12+ –º–µ—Å—è—Ü.* *–ü—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞.*  
‚ûú –û—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ —Å–¥–µ–ª–∫–µ ~*40 –º–ª–Ω ‚ÇΩ* –ø—Ä–∏–±—ã–ª–∏.

*–ò—Ç–æ–≥–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∑–∞ –≥–æ–¥:* –æ–∫–æ–ª–æ *50 –º–ª–Ω ‚ÇΩ* –ø—Ä–∏–±—ã–ª–∏ —Å—É–º–º–∞—Ä–Ω–æ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ + –ø–æ–¥–ø–∏—Å–∫–∏ + –ø—Ä–æ–¥–∞–∂–∞).  
–≠—Ç–æ *–Ω–µ –æ–±–µ—â–∞–Ω–∏–µ*, –∞ —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –º—ã –≤–µ–¥—ë–º: –∑–Ω–∞–µ–º *–∫–∞–∫* —Ç—É–¥–∞ –ø—Ä–∏–π—Ç–∏ —à–∞–≥–∞–º–∏ ‚Äî –ø–∏–ª–æ—Ç—ã ‚Üí MRR ‚Üí —É–ø–∞–∫–æ–≤–∫–∞ ‚Üí —Å–¥–µ–ª–∫–∞.`,

  investments: `–¶–∏—Ñ—Ä—ã –Ω–∏–∂–µ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã. –û–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç—Ä–∞–Ω—ã, –±–∞–Ω–∫–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥–∞–∂.

‚Ä¢ *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –≤–∑–Ω–æ—Å* (—Å—Ç–∞—Ä—Ç, –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤): *–æ—Ç 250 000 ‚ÇΩ*  
‚Ä¢ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏* (—é—Ä–∏—Å—Ç/—Å–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤): *–æ—Ç 100 000 ‚ÇΩ*  
‚Ä¢ *–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—á—ë—Ç–∞* (–±–∞–Ω–∫/—Ñ–∏–Ω—Ç–µ—Ö): *–æ—Ç 50 000 ‚ÇΩ*  
‚Ä¢ *–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã 3‚Äì4 –º–µ—Å.*: –æ—Ç *100 000 ‚ÇΩ*

–ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ —é—Ä–ª–∏—Ü—É/—Å—á—ë—Ç—É. –ù–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ—Å—Ç–∞—è: *–º–∏–Ω–∏–º—É–º –ª–∏—à–Ω–µ–≥–æ, –º–∞–∫—Å–∏–º—É–º –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏*.`,

  roles: `*–û—Ç –Ω–∞—Å:*
‚Ä¢ –ü–æ–ª–Ω–∞—è *—Å–±–æ—Ä–∫–∞ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ ¬´–ø–æ–¥ –∫–ª—é—á¬ª*: –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤.  
‚Ä¢ *–ú–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂* –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–¥–∞—ë–º –∏ –∫–∞–∫.  
‚Ä¢ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–¥–∞–∂–µ –±–∏–∑–Ω–µ—Å–∞*: –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏.  
‚Ä¢ –ü–æ–º–æ—â—å —Å *—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–ø–∞–Ω–∏–∏* –∏ *–æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á—ë—Ç–∞*.

*–ö–∞–∫ –º—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º:* —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ ‚Äî *–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞*. –†–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–µ–ª–∞–µ–º *–ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏*. –ù–∞–º –≤—ã–≥–æ–¥–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –≤—ã—Ä–æ—Å –∏ *—Å–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å*.

*–û—Ç —Ç–µ–±—è:*
‚Ä¢ *–ë—é–¥–∂–µ—Ç* –Ω–∞ –≤—Ö–æ–¥ –∏ –ø–µ—Ä–≤—ã–µ –º–µ—Å—è—Ü—ã –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∏ (—Å–º–æ—Ç—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –≤—ã—à–µ).  
‚Ä¢ *–õ–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –Ω–µ—Ç–≤–æ—Ä–∫*: –≤—Å—Ç—Ä–µ—á–∏, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã, –ø–µ—Ä–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã.  
‚Ä¢ *–ê–Ω–≥–ª–∏–π—Å–∫–∏–π* –¥–ª—è –¥–µ–ª–æ–≤–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ä—ã–Ω–æ–∫ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç).  
‚Ä¢ *15‚Äì20 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é* –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ: —Å–æ–∑–≤–æ–Ω—ã, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –∫–æ–Ω—Ç—Ä–æ–ª—å.

–ï—Å–ª–∏ –≤—Å—ë —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è ‚Äî —É –Ω–∞—Å —Å–æ–π–¥–µ—Ç—Å—è —Ç–µ–º–ø –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`,

  qualification: `–ß—Ç–æ–±—ã –º—ã –¥–≤–∏–≥–∞–ª–∏—Å—å –±—ã—Å—Ç—Ä–æ –∏ –ø–æ –¥–µ–ª—É ‚Äî –æ—Ç–º–µ—Ç—å –≥–∞–ª–æ—á–∫–∞–º–∏:  
‚òê –ï—Å—Ç—å –æ–ø—ã—Ç: *2+ –≥–æ–¥–∞* –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ / —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞  
‚òê –ï—Å—Ç—å *10‚Äì20 —Ç—ë–ø–ª—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤* –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –≤ —Ç–≤–æ—ë–º —Ä—ã–Ω–∫–µ  
‚òê –ï—Å—Ç—å *–±—é–¥–∂–µ—Ç* –Ω–∞ –≤—Ö–æ–¥ –∏ 3‚Äì4 –º–µ—Å—è—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∏  
‚òê –ì–æ—Ç–æ–≤(–∞) *–ª–∏—á–Ω–æ –≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏/–∞–∫–∫–∞—É–Ω—Ç* –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ò–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞

–≠—Ç–æ –Ω–µ ¬´—ç–∫–∑–∞–º–µ–Ω¬ª. –ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –≥–æ—Ç–æ–≤(–∞) –∑–∞—Ö–æ–¥–∏—Ç—å, –∏ –º—ã —Å–º–æ–∂–µ–º –¥–∞—Ç—å —Ç–µ–±–µ —Ç–µ–º–ø.`,

  callBooking: `–ü—Ä–µ–¥–ª–∞–≥–∞—é *–ª–∏—á–Ω—ã–π —Å–æ–∑–≤–æ–Ω –Ω–∞ 20‚Äì30 –º–∏–Ω—É—Ç*. –†–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ–π —Ä—ã–Ω–æ–∫, –ø—Ä–∏–∫–∏–Ω–µ–º –ø—É—Ç—å –∫ ~$15 000/–º–µ—Å –∏ –æ–±—Å—É–¥–∏–º, –∫–∞–∫ –≥–æ—Ç–æ–≤–∏–º –∫ –ø—Ä–æ–¥–∞–∂–µ.  
–§–æ—Ä–º–∞—Ç –±–µ–∑ ¬´–≤–æ–¥—ã¬ª: —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏.`,

  callForm: `–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ —Å–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫.

*–®–∞–≥ 1 –∏–∑ 7: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*
–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.`,

  callFormName: `*–®–∞–≥ 2 –∏–∑ 7: –ö–æ–Ω—Ç–∞–∫—Ç—ã*
–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ:
‚Ä¢ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username)
‚Ä¢ Email (–Ω–∞–ø—Ä–∏–º–µ—Ä: name@example.com)
‚Ä¢ –ò–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω`,

  callFormContact: `*–®–∞–≥ 3 –∏–∑ 7: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ*
–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?`,

  callFormLocation: `*–®–∞–≥ 4 –∏–∑ 7: –û–ø—ã—Ç*
–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —É –≤–∞—Å –≤ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ?`,

  callFormExperience: `*–®–∞–≥ 5 –∏–∑ 7: –ë—é–¥–∂–µ—Ç*
–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –≤–ª–æ–∂–∏—Ç—å –≤ —Å—Ç–∞—Ä—Ç –∏ –ø–µ—Ä–≤—ã–µ –º–µ—Å—è—Ü—ã –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∏?
(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-2 –º–ª–Ω —Ä—É–±, 500-800 —Ç—ã—Å —Ä—É–±)`,

  callFormBudget: `*–®–∞–≥ 6 –∏–∑ 7: –ù–∏—à–∞*
–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ/–Ω–∏—à–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?
(–Ω–∞–ø—Ä–∏–º–µ—Ä: IT-—É—Å–ª—É–≥–∏, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, e-commerce)`,

  callFormTime: `*–®–∞–≥ 7 –∏–∑ 7: –í—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞*
–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.
(–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ —Å 10 –¥–æ 12, –≤ —Å—Ä–µ–¥—É –≤–µ—á–µ—Ä–æ–º, –≤ –ø—è—Ç–Ω–∏—Ü—É —Å 14 –¥–æ 16)`,

  callConfirmation: `–ë—Ä–æ–Ω—å –ø—Ä–∏–Ω—è—Ç–∞. –ó–∞ *2 —á–∞—Å–∞* –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–ø–æ–º–Ω—é –∑–¥–µ—Å—å –∂–µ.  
–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è—é—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏ *¬´–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏¬ª*.`,

  faq: `*‚Äî –ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏?*
–ß–µ—Å—Ç–Ω–æ: *–≥–∞—Ä–∞–Ω—Ç–∏–π –Ω–µ—Ç*. –ú—ã –Ω–µ –ø—Ä–æ–¥–∞—ë–º ¬´–∫–Ω–æ–ø–∫—É¬ª. –ú—ã –∑–∞—Ö–æ–¥–∏–º –≤–º–µ—Å—Ç–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –≤–∑—Ä–æ—Å–ª–æ–º—É: –ø–µ—Ä–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, MRR, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–¥–µ–ª–∫–∞. *–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.* –ú—ã –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥–∏–∫—É, —Ä—É–∫–∏ –∏ —Ç–µ–º–ø.

*‚Äî –í —á—ë–º –≤–∞—à–∞ –≤—ã–≥–æ–¥–∞?*
–ü—Ä—è–º–æ: *–º—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ —ç–∫–∑–∏—Ç–µ* ‚Äî –±–µ—Ä—ë–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞. –í—Å—ë, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤, –¥–µ–ª–∞–µ–º *–ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏*. –ù–∞–º –≤—ã–≥–æ–¥–Ω–æ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –∏ *–∫—Ä–∞—Å–∏–≤–æ –ø—Ä–æ–¥–∞—Ç—å*.

*‚Äî –í –∫–∞–∫–∏–µ –Ω–∏—à–∏ –≤—ã –∑–∞—Ö–æ–¥–∏—Ç–µ?*
*–õ—é–±—ã–µ B2B-—Å–µ—Ä–≤–∏—Å—ã*, –≥–¥–µ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∫–ª–∏–µ–Ω—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥- –∏ –ø–æ—Å—Ç–ø—Ä–æ–¥–∞–∂–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, –ª–∏–¥-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞/–æ–ø–µ—Ä–∞—Ü–∏–π, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Ç. –¥. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–Ω—è—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –±–∏–∑–Ω–µ—Å–∞ ‚Äî –º—ã —É–º–µ–µ–º —ç—Ç–æ —Å–æ–±—Ä–∞—Ç—å.

*‚Äî –ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã —Å—Ä–æ–∫–∏?*
*1-4 –º–µ—Å—è—Ü–∞* ‚Äî –ø–µ—Ä–≤—ã–µ –ø–ª–∞—Ç—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã. *4‚Äì6 –º–µ—Å—è—Ü–µ–≤* ‚Äî —Ü–µ–ª—å ~$15 000/–º–µ—Å. *10‚Äì12 –º–µ—Å—è—Ü–µ–≤* ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–¥–∞–∂–µ. –≠—Ç–æ –∂–∏–≤–æ–π —Ç–µ–º–ø, –±–µ–∑ —Å—É–µ—Ç—ã –∏ –ø—É—Å—Ç—ã—Ö –æ–±–µ—â–∞–Ω–∏–π.`,

  beginnerCheck: `–°–µ–π—á–∞—Å –º—ã –Ω–∞–±–∏—Ä–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤ *–≤—Ö–æ–¥–∏—Ç—å –ø–æ-–≤–∑—Ä–æ—Å–ª–æ–º—É*. –û—Ç–≤–µ—Ç—å —á–µ—Å—Ç–Ω–æ –Ω–∞ –¥–≤–∞ –ø—É–Ω–∫—Ç–∞:

1. –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —É–≤–µ—Ä–µ–Ω(–∞) –≤ —Å–µ–±–µ –∫–∞–∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å ‚Äî –ø–æ —à–∫–∞–ª–µ *1‚Äì10*?  
2. –ï—Å—Ç—å –ª–∏ *1 000 000 ‚ÇΩ+*, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≥–æ—Ç–æ–≤(–∞) –≤–ª–æ–∂–∏—Ç—å –≤ —Å—Ç–∞—Ä—Ç –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫—É?  

–ï—Å–ª–∏ –ø–æ –æ–±–æ–∏–º –ø—É–Ω–∫—Ç–∞–º ¬´–¥–∞¬ª ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–∞–º *–∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç*, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è, –∏ –Ω–∞ —ç—Ç–æ–º –Ω–µ –ø–æ—Ç–µ—Ä—è–µ–º—Å—è.`
};

// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const keyboards = {
  welcome: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–•–æ—á—É –¥–µ—Ç–∞–ª–∏", callback_data: "want_details" }],
        [{ text: "–Ø –Ω–∞—á–∏–Ω–∞—é—â–∏–π ‚Äî —É—Ç–æ—á–Ω–∏—Ç—å", callback_data: "beginner_check" }],
        [{ text: "FAQ", callback_data: "faq" }]
      ]
    }
  },

  mainMenu: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data: "how_it_works" }],
        [{ text: "–§–∏–Ω–º–æ–¥–µ–ª—å (–ø—Ä–∏–º–µ—Ä)", callback_data: "financial_model" }],
        [{ text: "–í–ª–æ–∂–µ–Ω–∏—è", callback_data: "investments" }],
        [{ text: "–û—Ç –Ω–∞—Å / –û—Ç —Ç–µ–±—è", callback_data: "roles" }],
        [{ text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫", callback_data: "call_booking" }],
        [{ text: "FAQ", callback_data: "faq" }]
      ]
    }
  },

  qualification: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data: "qualified" }],
        [{ text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫", callback_data: "call_booking" }]
      ]
    }
  },

  callBooking: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data: "call_form" }]
      ]
    }
  },

  callForm: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ù–∞–∑–∞–¥", callback_data: "call_booking" }]
      ]
    }
  },

  callFormSteps: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ù–∞–∑–∞–¥", callback_data: "call_booking" }]
      ]
    }
  },

  callConfirmation: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data: "reschedule_call" }],
        [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_call" }],
        [{ text: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: "ask_question" }]
      ]
    }
  },

  faq: {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–≤–æ–Ω–æ–∫", callback_data: "call_booking" }],
        [{ text: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: "ask_question" }]
      ]
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveMessage(chatId: string, messageId: number, text: string, messageType: string, step: string) {
  try {
    await convex.mutation(api.conversations.addMessage, {
      chatId,
      messageId,
      text,
      messageType,
      step,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞
async function updateDialogStep(chatId: string, step: string, messageId?: number) {
  try {
    await convex.mutation(api.conversations.updateConversationStep, {
      chatId,
      step,
      lastMessageId: messageId,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞
async function upsertLead(chatId: string, userId: string, userInfo: any, additionalData: any = {}) {
  try {
    await convex.mutation(api.leads.upsertLead, {
      chatId,
      userId,
      username: userInfo.username,
      firstName: userInfo.first_name,
      lastName: userInfo.last_name,
      ...additionalData,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—à–∞–≥–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
async function processStepForm(chatId: string, userId: string, text: string, ctx: any, currentStep: string) {
  try {
    let nextStep = "";
    let responseText = "";
    let keyboard = keyboards.callFormSteps;

    switch (currentStep) {
      case "call_form_name":
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        console.log("Saving name:", text.trim(), "for chatId:", chatId, "userId:", userId);
        await convex.mutation(api.leads.upsertLead, {
          chatId,
          userId,
          firstName: text.trim(),
        });
        nextStep = "call_form_contact";
        responseText = messages.callFormName;
        break;

      case "call_form_contact":
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        console.log("Saving contact:", text.trim(), "for chatId:", chatId);
        await convex.mutation(api.leads.upsertLead, {
          chatId,
          userId,
          email: text.includes('@') ? text.trim() : undefined,
          phone: text.includes('@') ? undefined : text.trim(),
        });
        nextStep = "call_form_location";
        responseText = messages.callFormContact;
        break;

      case "call_form_location":
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        await convex.mutation(api.leads.upsertLead, {
          chatId,
          userId,
          country: text.trim(),
        });
        nextStep = "call_form_experience";
        responseText = messages.callFormLocation;
        break;

      case "call_form_experience":
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç
        const experience = parseInt(text.match(/\d+/)?.[0] || '0');
        await convex.mutation(api.leads.upsertLead, {
          chatId,
          userId,
          experience: experience,
        });
        nextStep = "call_form_budget";
        responseText = messages.callFormExperience;
        break;

      case "call_form_budget":
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç
        await convex.mutation(api.leads.upsertLead, {
          chatId,
          userId,
          budget: text.trim(),
        });
        nextStep = "call_form_niche";
        responseText = messages.callFormBudget;
        break;

      case "call_form_niche":
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏—à—É
        await convex.mutation(api.leads.upsertLead, {
          chatId,
          userId,
          niche: text.trim(),
        });
        nextStep = "call_form_time";
        responseText = messages.callFormTime;
        break;

      case "call_form_time":
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        const existingLead = await convex.query(api.leads.getLead, { chatId });
        const isReschedule = existingLead && existingLead.status === "qualified";

        if (isReschedule) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
          await convex.mutation(api.leads.upsertLead, {
            chatId,
            userId,
            preferredTime: [text.trim()],
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –∑–≤–æ–Ω–æ–∫
          const booking = await convex.query(api.callBookings.getCallBooking, { chatId });
          if (booking) {
            await convex.mutation(api.callBookings.updateCallBooking, {
              chatId,
              selectedTime: text.trim(),
              status: "pending",
            });
          }

          nextStep = "call_confirmation";
          responseText = "*–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!* –ó–∞ *2 —á–∞—Å–∞* –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–ø–æ–º–Ω—é –∑–¥–µ—Å—å –∂–µ.";
          keyboard = keyboards.callConfirmation;
        } else {
          // –ü–µ—Ä–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∫–µ—Ç—É
          await convex.mutation(api.leads.upsertLead, {
            chatId,
            userId,
            preferredTime: [text.trim()],
            status: "qualified",
          });

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –¢–û–õ–¨–ö–û –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
          const lead = await convex.query(api.leads.getLead, { chatId });
          if (lead) {
            await convex.mutation(api.callBookings.createCallBooking, {
              chatId,
              leadId: lead._id,
              preferredTimes: [text.trim()],
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ
            await sendNewLeadNotification(lead._id);
          }

          nextStep = "call_confirmation";
          responseText = "*–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É.* –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –≤—ã–±–æ—Ä–∞ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞.";
          keyboard = keyboards.callConfirmation;
        }
        break;

      default:
        responseText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.";
        keyboard = keyboards.callBooking;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await ctx.reply(responseText, {
      parse_mode: "Markdown",
      reply_markup: keyboard.reply_markup
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–∏–∞–ª–æ–≥–∞
    if (nextStep) {
      await updateDialogStep(chatId, nextStep);
    }

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ –∞–Ω–∫–µ—Ç—ã:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", {
      parse_mode: "Markdown"
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  if (!ctx.from) return;
  
  const chatId = ctx.chat.id.toString();
  const userId = ctx.from.id.toString();
  const userInfo = ctx.from;

  // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
  await convex.mutation(api.conversations.upsertConversation, {
    chatId,
    userId,
    username: userInfo.username,
    firstName: userInfo.first_name,
    lastName: userInfo.last_name,
    currentStep: "welcome",
  });

  // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–∞
  await upsertLead(chatId, userId, userInfo);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = await ctx.reply(messages.welcome, { 
    ...keyboards.welcome, 
    parse_mode: "Markdown" 
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await saveMessage(chatId, message.message_id, messages.welcome, "bot", "welcome");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query", async (ctx) => {
  if (!ctx.from || !ctx.chat) return;
  
  const chatId = ctx.chat.id.toString();
  const userId = ctx.from.id.toString();
  const callbackData = ctx.callbackQuery.data;
  const userInfo = ctx.from;

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
  await convex.mutation(api.conversations.upsertConversation, {
    chatId,
    userId,
    username: userInfo.username,
    firstName: userInfo.first_name,
    lastName: userInfo.last_name,
    currentStep: callbackData || "unknown",
  });

  let responseText = "";
  let keyboard: any = null;

  switch (callbackData) {
    case "want_details":
      responseText = messages.wantDetails;
      keyboard = keyboards.mainMenu;
      break;

    case "how_it_works":
      responseText = messages.howItWorks;
      keyboard = keyboards.mainMenu;
      break;

    case "financial_model":
      responseText = messages.financialModel;
      keyboard = keyboards.mainMenu;
      break;

    case "investments":
      responseText = messages.investments;
      keyboard = keyboards.mainMenu;
      break;

    case "roles":
      responseText = messages.roles;
      keyboard = keyboards.mainMenu;
      break;

    case "qualification":
      responseText = messages.qualification;
      keyboard = keyboards.qualification;
      break;

    case "call_booking":
      responseText = messages.callBooking;
      keyboard = keyboards.callBooking;
      break;

    case "call_form":
      responseText = messages.callForm;
      keyboard = keyboards.callForm;
      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∞–Ω–∫–µ—Ç—ã
      await updateDialogStep(chatId, "call_form_name");
      break;

    case "faq":
      responseText = messages.faq;
      keyboard = keyboards.faq;
      break;

    case "beginner_check":
      responseText = messages.beginnerCheck;
      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–î–∞, –≥–æ—Ç–æ–≤(–∞)", callback_data: "ready_yes" }],
            [{ text: "–ù–µ—Ç, 1 –º–ª–Ω –Ω–µ—Ç", callback_data: "ready_no" }]
          ]
        }
      };
      break;

    case "ready_yes":
      responseText = "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—è–º.";
      keyboard = keyboards.mainMenu;
      break;

    case "ready_no":
      responseText = "–ü–æ–Ω—è—Ç–Ω–æ. –í–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n\n1. –ù–∞–∫–æ–ø–∏—Ç–µ –æ–ø—ã—Ç –≤ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–µ (2+ –≥–æ–¥–∞)\n2. –°–æ–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –æ—Ç 1 –º–ª–Ω ‚ÇΩ\n3. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –≤–∞—à–µ–π –Ω–∏—à–µ\n4. –ò–∑—É—á–∏—Ç–µ B2B-–ø—Ä–æ–¥–∞–∂–∏\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!";
      keyboard = keyboards.welcome;
      break;

    case "qualified":
      responseText = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫.";
      keyboard = keyboards.callBooking;
      break;


    case "reschedule_call":
      responseText = "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –∑–≤–æ–Ω–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:";
      keyboard = keyboards.callBooking;
      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
      await updateDialogStep(chatId, "call_form_time");
      break;

    case "cancel_call":
      responseText = "–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.";
      keyboard = keyboards.welcome;
      break;

    case "ask_question":
      responseText = "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.";
      break;

    default:
      responseText = "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      keyboard = keyboards.welcome;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
  await ctx.answerCallbackQuery();
  const message = await ctx.editMessageText(responseText, { 
    ...(keyboard || {}), 
    parse_mode: "Markdown" 
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (message && typeof message === 'object' && 'message_id' in message) {
    await saveMessage(chatId, message.message_id, responseText, "bot", callbackData || "unknown");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  if (!ctx.from) return;
  
  const chatId = ctx.chat.id.toString();
  const userId = ctx.from.id.toString();
  const text = ctx.message.text;
  const messageId = ctx.message.message_id;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–∏–∞–ª–æ–≥–∞
  const conversation = await convex.query(api.conversations.getConversation, { chatId });
  
  if (!conversation) {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start", { 
      parse_mode: "Markdown" 
    });
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await saveMessage(chatId, messageId, text, "user", conversation.currentStep);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  switch (conversation.currentStep) {
    case "ask_question":
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const lead = await convex.query(api.leads.getLead, { chatId });
      if (lead) {
        const questionId = await convex.mutation(api.questions.createQuestion, {
          chatId,
          leadId: lead._id,
          question: text,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        await sendNewQuestionNotification(questionId);

        await ctx.reply("*–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å!* –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∫–æ–º–∞–Ω–¥–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º.", { 
          parse_mode: "Markdown" 
        });
      } else {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start", { 
          parse_mode: "Markdown" 
        });
      }
      break;

    case "call_form_name":
    case "call_form_contact":
    case "call_form_location":
    case "call_form_experience":
    case "call_form_budget":
    case "call_form_niche":
    case "call_form_time":
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await processStepForm(chatId, userId, text, ctx, conversation.currentStep);
      break;

    default:
      await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.", { 
        parse_mode: "Markdown" 
      });
  }
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command("stats", async (ctx) => {
  if (!ADMIN_CHAT_IDS.includes(ctx.chat.id)) {
    await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  try {
    const stats = await convex.query(api.leads.getLeadsStats);
    const questionStats = await convex.query(api.questions.getQuestionsStats);

    const message = `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*

*–õ–∏–¥—ã:*
–í—Å–µ–≥–æ: ${stats.total}
–ù–æ–≤—ã–µ: ${stats.new}
–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${stats.qualified}
–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∑–≤–æ–Ω–∫–∏: ${stats.scheduled}
–ó–∞–≤–µ—Ä—à–µ–Ω—ã: ${stats.completed}
–û—Ç–∫–ª–æ–Ω–µ–Ω—ã: ${stats.rejected}

*–í–æ–ø—Ä–æ—Å—ã:*
–í—Å–µ–≥–æ: ${questionStats.total}
–í –æ–∂–∏–¥–∞–Ω–∏–∏: ${questionStats.pending}
–û—Ç–≤–µ—á–µ–Ω—ã: ${questionStats.answered}
–ó–∞–∫—Ä—ã—Ç—ã: ${questionStats.closed}`;
    
    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
});

bot.command("leads", async (ctx) => {
  if (!ADMIN_CHAT_IDS.includes(ctx.chat.id)) {
    await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  try {
    const leads = await convex.query(api.leads.getAllLeads, {});
    let message = "*–°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤:*\n\n";
    
    if (leads && leads.length > 0) {
      leads.forEach(lead => {
        message += `*ID:* \`${lead._id}\`\n`;
        message += `*–ò–º—è:* ${lead.firstName || "N/A"}\n`;
        message += `*Telegram:* ${lead.username ? `@${lead.username}` : "N/A"}\n`;
        message += `*–°—Ç–∞—Ç—É—Å:* ${lead.status}\n`;
        message += `*–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞:* ${lead.preferredTime?.join(", ") || "N/A"}\n`;
        message += `--------------------\n`;
      });
    } else {
      message += "–õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }
    
    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤.");
  }
});

bot.command("questions", async (ctx) => {
  if (!ADMIN_CHAT_IDS.includes(ctx.chat.id)) {
    await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  try {
    const questions = await convex.query(api.questions.getAllQuestions, {});
    let message = "*–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:*\n\n";
    
    if (questions && questions.length > 0) {
      for (const q of questions) {
        const lead = await convex.query(api.leads.getLead, { chatId: q.chatId });
        message += `*ID:* \`${q._id}\`\n`;
        message += `*–û—Ç:* ${lead?.firstName || "N/A"} (${lead?.username ? `@${lead?.username}` : "N/A"})\n`;
        message += `*–í–æ–ø—Ä–æ—Å:* ${q.question}\n`;
        message += `*–°—Ç–∞—Ç—É—Å:* ${q.status}\n`;
        message += `--------------------\n`;
      }
    } else {
      message += "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }
    
    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (process.env.TELEGRAM_BOT_TOKEN) {
  try {
    bot.start();
    console.log("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞:", error);
  }
} else {
  console.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
}