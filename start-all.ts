#!/usr/bin/env bun

import { spawn } from "child_process";

console.log("üöÄ –ó–∞–ø—É—Å–∫ Max Bot - –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã");
console.log("================================");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
const mainToken = process.env.TELEGRAM_BOT_TOKEN;

console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:");
console.log("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:", mainToken?.substring(0, 10) + "...");

if (!mainToken) {
  console.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN!");
  console.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env");
  process.exit(1);
}

console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");

// –ó–∞–ø—É—Å–∫ Convex
console.log("üîß –ó–∞–ø—É—Å–∫ Convex...");
const convex = spawn("bunx", ["convex", "dev"], {
  stdio: "inherit",
  shell: true
});

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
setTimeout(() => {
  // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
  console.log("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...");
  const mainBot = spawn("bun", ["run", "index.ts"], {
    stdio: "inherit",
    shell: true
  });

  console.log("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!");
  console.log("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on("SIGINT", () => {
    console.log("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...");
    convex.kill("SIGTERM");
    mainBot.kill("SIGTERM");
    process.exit(0);
  });
}, 3000);
